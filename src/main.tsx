/**
 * üöÄ Point d'Entr√©e Principal MedCollab - Version PWA Compl√®te
 * 
 * Fonctionnalit√©s PWA avanc√©es :
 * - Service Worker avec strat√©gies de cache intelligentes
 * - Synchronisation offline/online automatique
 * - Gestion des notifications push
 * - Optimisation des performances
 * - Compatibilit√© multi-plateforme (Web, iOS, Android)
 */

import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';
import { HelmetProvider } from 'react-helmet-async';

// V√©rification de l'existence de l'√©l√©ment racine DOM
const rootElement = document.getElementById("root");
if (!rootElement) {
  throw new Error("√âl√©ment racine non trouv√© - impossible de monter l'application React");
}

/**
 * üîß Configuration des notifications push
 */
const setupNotifications = async () => {
  if ('Notification' in window && 'serviceWorker' in navigator) {
    try {
      // Demander la permission pour les notifications
      const permission = await Notification.requestPermission();
      
      if (permission === 'granted') {
        console.log('üì± PWA: Notifications autoris√©es');
        
        // Enregistrer pour les notifications push
        const registration = await navigator.serviceWorker.ready;
        console.log('üì± PWA: Service Worker pr√™t pour les notifications');
        
        // Exemple de notification de bienvenue apr√®s un d√©lai
        setTimeout(() => {
          new Notification('üéâ MedCollab', {
            body: 'Application pr√™te √† √™tre utilis√©e ! Installez-la pour une meilleure exp√©rience.',
            icon: '/pwa-192x192.png',
            tag: 'welcome',
            badge: '/pwa-192x192.png'
          });
        }, 5000);
      } else {
        console.log('‚ùå PWA: Notifications refus√©es par l\'utilisateur');
      }
    } catch (error) {
      console.error('‚ùå PWA: Erreur lors de la configuration des notifications:', error);
    }
  }
};

/**
 * üîÑ Gestion de la synchronisation en arri√®re-plan
 */
const setupBackgroundSync = async () => {
  if ('serviceWorker' in navigator) {
    try {
      const registration = await navigator.serviceWorker.ready;
      console.log('üîÑ PWA: Synchronisation en arri√®re-plan disponible');
      
      // V√©rifier si la synchronisation est support√©e
      if ('sync' in registration) {
        // Enregistrer les t√¢ches de synchronisation
        await (registration as any).sync.register('background-sync');
        console.log('‚úÖ PWA: T√¢che de synchronisation enregistr√©e');
      }
      
    } catch (error) {
      console.error('‚ùå PWA: Erreur lors de la configuration de la synchronisation:', error);
    }
  }
};

/**
 * üì± Configuration sp√©ciale pour d√©clencher l'invite d'installation PWA
 */
const setupInstallPrompt = async () => {
  console.log('üì± PWA: Configuration de l\'invite d\'installation');
  
  // Forcer le d√©clenchement de beforeinstallprompt si pas encore d√©clench√©
  setTimeout(() => {
    // V√©rifier si l'app n'est pas d√©j√† install√©e
    const isStandalone = window.matchMedia('(display-mode: standalone)').matches ||
                        (window.navigator as any).standalone === true;
    
    if (!isStandalone) {
      console.log('üì± PWA: Application non install√©e, invite d\'installation active');
      
      // D√©clencher un √©v√©nement personnalis√© pour les navigateurs qui ne d√©clenchent pas automatiquement
      const isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
      const isEdge = /Edg/.test(navigator.userAgent);
      
      if (isChrome || isEdge) {
        console.log('üåê PWA: Navigateur compatible PWA d√©tect√©');
        // L'√©v√©nement beforeinstallprompt devrait se d√©clencher automatiquement
      } else {
        console.log('üåê PWA: Navigateur avec support PWA limit√©');
        // Pour les autres navigateurs, on peut afficher des instructions personnalis√©es
      }
    } else {
      console.log('‚úÖ PWA: Application d√©j√† install√©e');
    }
  }, 2000);
};

/**
 * üì± Enregistrement du Service Worker PWA avec fonctionnalit√©s avanc√©es
 */
if ('serviceWorker' in navigator) {
  window.addEventListener('load', async () => {
    try {
      console.log('üîß PWA: Enregistrement du Service Worker...');
      
      // Enregistrement du service worker avec options √©tendues
      const registration = await navigator.serviceWorker.register('/sw.js', {
        scope: '/',
        updateViaCache: 'none'
      });
      
      console.log('‚úÖ PWA: Service Worker enregistr√© avec succ√®s:', registration.scope);
      
      // Configuration des fonctionnalit√©s PWA
      await Promise.all([
        setupNotifications(),
        setupBackgroundSync(),
        setupInstallPrompt()
      ]);
      
      // Gestion des mises √† jour du service worker
      registration.addEventListener('updatefound', () => {
        const newWorker = registration.installing;
        if (newWorker) {
          console.log('üîÑ PWA: Nouvelle version du Service Worker d√©tect√©e');
          
          newWorker.addEventListener('statechange', () => {
            if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
              console.log('üÜï PWA: Nouvelle version pr√™te');
              
              // Notification de mise √† jour
              if (Notification.permission === 'granted') {
                new Notification('üîÑ MedCollab - Mise √† jour', {
                  body: 'Une nouvelle version est disponible !',
                  icon: '/pwa-192x192.png',
                  tag: 'update',
                  badge: '/pwa-192x192.png'
                });
              }
              
              // Demander √† l'utilisateur s'il veut recharger
              if (window.confirm('üîÑ Une nouvelle version de MedCollab est disponible. Recharger maintenant ?')) {
                window.location.reload();
              }
            }
          });
        }
      });
      
      // V√©rification p√©riodique des mises √† jour (toutes les 30 minutes)
      setInterval(async () => {
        try {
          await registration.update();
          console.log('üîç PWA: V√©rification de mise √† jour effectu√©e');
        } catch (error) {
          console.log('‚ö†Ô∏è PWA: Erreur lors de la v√©rification de mise √† jour:', error);
        }
      }, 30 * 60 * 1000);
      
    } catch (registrationError) {
      console.error('‚ùå PWA: √âchec de l\'enregistrement du Service Worker:', registrationError);
    }
  });

  // Gestion des √©v√©nements de connexion r√©seau avec notifications
  window.addEventListener('online', () => {
    console.log('üåê PWA: Connexion r√©seau restaur√©e');
    
    // Notification de reconnexion
    if (Notification.permission === 'granted') {
      new Notification('üåê MedCollab', {
        body: 'Connexion r√©tablie - Synchronisation en cours...',
        icon: '/pwa-192x192.png',
        tag: 'online',
        badge: '/pwa-192x192.png'
      });
    }
    
    // D√©clencher la synchronisation des donn√©es
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.ready.then(registration => {
        if ('sync' in registration) {
          return (registration as any).sync.register('sync-data');
        }
      }).catch(error => {
        console.error('‚ùå PWA: Erreur lors de la synchronisation:', error);
      });
    }
  });

  window.addEventListener('offline', () => {
    console.log('üì¥ PWA: Connexion r√©seau perdue - Mode hors ligne activ√©');
    
    // Notification de perte de connexion
    if (Notification.permission === 'granted') {
      new Notification('üì¥ MedCollab', {
        body: 'Mode hors ligne activ√© - Vos donn√©es sont sauvegard√©es localement',
        icon: '/pwa-192x192.png',
        tag: 'offline',
        badge: '/pwa-192x192.png'
      });
    }
  });
} else {
  console.log('‚ùå PWA: Service Worker non support√© par ce navigateur');
}

// Cr√©ation et montage de l'application React
const root = createRoot(rootElement);

root.render(
  <React.StrictMode>
    <HelmetProvider>
      <App />
    </HelmetProvider>
  </React.StrictMode>
);

// Ajout de m√©tadonn√©es PWA dynamiques
if (typeof window !== 'undefined') {
  console.log('üì± PWA: Configuration des m√©tadonn√©es multi-plateforme');
  
  // M√©tadonn√©es de th√®me adaptatif
  const themeColorMeta = document.createElement('meta');
  themeColorMeta.name = 'theme-color';
  themeColorMeta.content = '#0077B6';
  document.head.appendChild(themeColorMeta);

  // Support iOS optimis√©
  const appleMobileMeta = document.createElement('meta');
  appleMobileMeta.name = 'apple-mobile-web-app-capable';
  appleMobileMeta.content = 'yes';
  document.head.appendChild(appleMobileMeta);

  const appleStatusBarMeta = document.createElement('meta');
  appleStatusBarMeta.name = 'apple-mobile-web-app-status-bar-style';
  appleStatusBarMeta.content = 'black-translucent';
  document.head.appendChild(appleStatusBarMeta);

  // Titre de l'application iOS
  const appleTitleMeta = document.createElement('meta');
  appleTitleMeta.name = 'apple-mobile-web-app-title';
  appleTitleMeta.content = 'MedCollab';
  document.head.appendChild(appleTitleMeta);

  // Support Windows
  const msTileColorMeta = document.createElement('meta');
  msTileColorMeta.name = 'msapplication-TileColor';
  msTileColorMeta.content = '#0077B6';
  document.head.appendChild(msTileColorMeta);

  // Viewport optimis√© pour PWA
  const viewportMeta = document.querySelector('meta[name="viewport"]');
  if (viewportMeta) {
    viewportMeta.setAttribute('content', 'width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, viewport-fit=cover');
  }

  console.log('‚úÖ PWA: M√©tadonn√©es multi-plateforme configur√©es');
}

/**
 * üîß Gestion des erreurs globales avec reporting PWA
 */
window.onerror = (message, source, lineno, colno, error) => {
  console.error('‚ùå Erreur globale captur√©e:', { message, source, lineno, colno, error });
  return false;
};

window.addEventListener('unhandledrejection', (event) => {
  console.error('‚ùå Promesse rejet√©e non g√©r√©e:', event.reason);
});

console.log('üöÄ MedCollab PWA initialis√© avec succ√®s - Version compl√®te');
