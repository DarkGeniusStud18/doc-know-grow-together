
/**
 * Contexte d'authentification principal de MedCollab
 * 
 * Ce contexte g√®re l'√©tat global d'authentification de l'application :
 * - Gestion de l'utilisateur connect√© et de son profil
 * - Persistance de l'√©tat de connexion
 * - Mise √† jour automatique des informations utilisateur
 * - Support des comptes de d√©monstration pour les tests
 * - Optimisations de performance avec useMemo et useCallback
 */

import React, { createContext, useContext, useEffect, useState, useMemo, useCallback } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { getCurrentUser } from '@/lib/auth/user-service';
import { User } from '@/lib/auth/types';
import { toast } from '@/components/ui/sonner';

/**
 * Interface du contexte d'authentification
 * D√©finit toutes les fonctionnalit√©s disponibles pour les composants enfants
 */
interface AuthContextType {
  /** Utilisateur actuellement connect√© (null si d√©connect√©) */
  user: User | null;
  /** Indicateur de chargement des donn√©es utilisateur */
  loading: boolean;
  /** Fonction pour mettre √† jour les donn√©es de l'utilisateur actuel */
  updateCurrentUser: (updatedUser: User) => void;
  /** Fonction pour rafra√Æchir les donn√©es utilisateur depuis la base de donn√©es */
  refreshUser: () => Promise<void>;
  /** Fonction pour d√©connecter l'utilisateur */
  signOut: () => Promise<void>;
}

// Cr√©ation du contexte avec une valeur par d√©faut
const AuthContext = createContext<AuthContextType | undefined>(undefined);

/**
 * Fournisseur du contexte d'authentification
 * Composant racine qui encapsule toute l'application pour fournir l'√©tat d'auth
 */
export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  // √âtats principaux du contexte
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  /**
   * Fonction optimis√©e pour mettre √† jour l'utilisateur actuel
   * Utilise useCallback pour √©viter les re-rendus inutiles
   */
  const updateCurrentUser = useCallback((updatedUser: User) => {
    console.log('üîÑ AuthContext: Mise √† jour des donn√©es utilisateur', {
      userId: updatedUser.id,
      displayName: updatedUser.displayName
    });
    setUser(updatedUser);
  }, []);

  /**
   * Fonction pour rafra√Æchir les donn√©es utilisateur depuis la base
   * Utile apr√®s des modifications de profil ou changements de permissions
   */
  const refreshUser = useCallback(async () => {
    console.log('üîÑ AuthContext: Rafra√Æchissement des donn√©es utilisateur...');
    try {
      const freshUser = await getCurrentUser();
      setUser(freshUser);
      
      if (freshUser) {
        console.log('‚úÖ AuthContext: Donn√©es utilisateur rafra√Æchies avec succ√®s');
      } else {
        console.log('‚ÑπÔ∏è AuthContext: Aucun utilisateur connect√© apr√®s rafra√Æchissement');
      }
    } catch (error) {
      console.error('‚ùå AuthContext: Erreur lors du rafra√Æchissement:', error);
      toast.error('Erreur de synchronisation', {
        description: 'Impossible de synchroniser vos donn√©es. Veuillez recharger la page.'
      });
    }
  }, []);

  /**
   * Fonction de d√©connexion optimis√©e
   * G√®re √† la fois les comptes r√©els et de d√©monstration
   */
  const signOut = useCallback(async () => {
    console.log('üö™ AuthContext: D√©but de la proc√©dure de d√©connexion');
    
    try {
      // Gestion sp√©ciale pour les comptes de d√©monstration
      const demoUser = localStorage.getItem('demoUser');
      if (demoUser) {
        localStorage.removeItem('demoUser');
        console.log('üë§ AuthContext: Compte de d√©monstration supprim√©');
      }

      // D√©connexion Supabase pour les comptes r√©els
      const { error } = await supabase.auth.signOut();
      if (error) {
        console.error('‚ùå AuthContext: Erreur Supabase lors de la d√©connexion:', error);
        throw error;
      }

      // R√©initialisation de l'√©tat local
      setUser(null);
      console.log('‚úÖ AuthContext: D√©connexion r√©ussie');
      
      toast.success('D√©connexion r√©ussie', {
        description: '√Ä bient√¥t sur MedCollab !'
      });

      // Redirection vers la page d'accueil
      setTimeout(() => {
        window.location.href = '/';
      }, 1000);

    } catch (error: any) {
      console.error('üí• AuthContext: Erreur critique lors de la d√©connexion:', error);
      toast.error('Erreur de d√©connexion', {
        description: error.message || 'Une erreur inattendue est survenue'
      });
    }
  }, []);

  /**
   * Effet d'initialisation du contexte d'authentification
   * Se d√©clenche au montage du composant pour charger l'utilisateur
   */
  useEffect(() => {
    console.log('üöÄ AuthContext: Initialisation du contexte d\'authentification');

    /**
     * Fonction interne pour charger l'utilisateur initial
     * V√©rifie la session active et r√©cup√®re les donn√©es de profil
     */
    const loadInitialUser = async () => {
      try {
        setLoading(true);
        console.log('üîç AuthContext: Chargement de l\'utilisateur initial...');
        
        const currentUser = await getCurrentUser();
        
        if (currentUser) {
          setUser(currentUser);
          console.log('‚úÖ AuthContext: Utilisateur charg√© avec succ√®s:', {
            id: currentUser.id,
            name: currentUser.displayName,
            role: currentUser.role
          });
        } else {
          console.log('‚ÑπÔ∏è AuthContext: Aucun utilisateur connect√©');
        }
      } catch (error) {
        console.error('‚ùå AuthContext: Erreur lors du chargement initial:', error);
        // Ne pas afficher de toast d'erreur au chargement initial pour √©viter le spam
      } finally {
        setLoading(false);
        console.log('üèÅ AuthContext: Chargement initial termin√©');
      }
    };

    // Ex√©cution du chargement initial
    loadInitialUser();

    /**
     * √âcouteur des changements d'√©tat d'authentification Supabase
     * R√©agit aux connexions/d√©connexions pour maintenir la synchronisation
     */
    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (event, session) => {
      console.log('üîî AuthContext: Changement d\'√©tat d\'authentification d√©tect√©:', {
        event,
        userId: session?.user?.id || 'aucun'
      });

      // Gestion des diff√©rents √©v√©nements d'authentification
      switch (event) {
        case 'SIGNED_IN':
          console.log('‚úÖ AuthContext: Connexion d√©tect√©e');
          await refreshUser();
          break;
          
        case 'SIGNED_OUT':
          console.log('üö™ AuthContext: D√©connexion d√©tect√©e');
          setUser(null);
          break;
          
        case 'TOKEN_REFRESHED':
          console.log('üîÑ AuthContext: Token rafra√Æchi');
          // Pas besoin de recharger l'utilisateur pour un simple refresh de token
          break;
          
        default:
          console.log(`‚ÑπÔ∏è AuthContext: √âv√©nement non g√©r√©: ${event}`);
      }
    });

    // Nettoyage de l'abonnement lors du d√©montage
    return () => {
      console.log('üßπ AuthContext: Nettoyage de l\'abonnement auth');
      subscription.unsubscribe();
    };
  }, [refreshUser]);

  /**
   * Valeur memo√Øs√©e du contexte pour optimiser les performances
   * √âvite les re-rendus inutiles des composants enfants
   */
  const contextValue = useMemo(() => ({
    user,
    loading,
    updateCurrentUser,
    refreshUser,
    signOut
  }), [user, loading, updateCurrentUser, refreshUser, signOut]);

  return (
    <AuthContext.Provider value={contextValue}>
      {children}
    </AuthContext.Provider>
  );
};

/**
 * Hook personnalis√© pour utiliser le contexte d'authentification
 * Fournit une interface simple et s√©curis√©e pour acc√©der aux donn√©es d'auth
 * 
 * @returns {AuthContextType} Les donn√©es et fonctions du contexte d'authentification
 * @throws {Error} Si utilis√© en dehors d'un AuthProvider
 * 
 * @example
 * ```tsx
 * const { user, loading, signOut } = useAuth();
 * 
 * if (loading) return <LoadingSpinner />;
 * if (!user) return <LoginForm />;
 * 
 * return <Dashboard user={user} onLogout={signOut} />;
 * ```
 */
export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  
  if (context === undefined) {
    throw new Error('useAuth doit √™tre utilis√© √† l\'int√©rieur d\'un AuthProvider');
  }
  
  return context;
};

export default AuthContext;
