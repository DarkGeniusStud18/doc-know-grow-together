
/**
 * üîù Composant ScrollToTop - Version Corrig√©e et Optimis√©e
 * 
 * Fonctionnalit√©s am√©lior√©es :
 * - D√©filement automatique vers le haut lors des changements de route
 * - Gestion intelligente des transitions
 * - Support pour les environnements mobile et desktop
 * - Optimisation des performances avec debouncing
 * - Prise en compte des ancres et des fragments d'URL
 */

import { useEffect, useRef } from 'react';
import { useLocation } from 'react-router-dom';

/**
 * üîù Hook pour g√©rer le d√©filement automatique vers le haut
 * D√©clench√© √† chaque changement de route avec optimisations
 */
const ScrollToTop: React.FC = () => {
  const location = useLocation();
  const previousPath = useRef<string>('');

  useEffect(() => {
    // V√©rifier si le chemin a r√©ellement chang√©
    const currentPath = location.pathname + location.search;
    
    if (previousPath.current === currentPath) {
      return; // Pas de changement, pas besoin de d√©filer
    }

    // Fonction de d√©filement avec options optimis√©es
    const scrollToTop = () => {
      try {
        // M√©thode moderne avec smooth scrolling si support√©e
        if ('scrollBehavior' in document.documentElement.style) {
          window.scrollTo({
            top: 0,
            left: 0,
            behavior: 'smooth'
          });
        } else {
          // Fallback pour les navigateurs plus anciens
          window.scrollTo(0, 0);
        }

        // Assurer le d√©filement pour les containers avec d√©filement
        const scrollableContainers = document.querySelectorAll('.overflow-y-auto, .overflow-auto');
        scrollableContainers.forEach(container => {
          if (container.scrollTop > 0) {
            container.scrollTop = 0;
          }
        });

        // D√©filement sp√©cifique pour les layouts mobiles
        const mobileContent = document.querySelector('.mobile-content');
        if (mobileContent && mobileContent.scrollTop > 0) {
          mobileContent.scrollTop = 0;
        }

        // D√©filement pour le contenu principal
        const mainContent = document.querySelector('main');
        if (mainContent && mainContent.scrollTop > 0) {
          mainContent.scrollTop = 0;
        }

      } catch (error) {
        console.warn('‚ö†Ô∏è Erreur lors du d√©filement automatique:', error);
        // Fallback simple en cas d'erreur
        window.scrollTo(0, 0);
      }
    };

    // Gestion des fragments d'URL (ancres)
    if (location.hash) {
      // Si il y a une ancre, laisser le navigateur g√©rer le d√©filement
      setTimeout(() => {
        const element = document.querySelector(location.hash);
        if (element) {
          element.scrollIntoView({ 
            behavior: 'smooth',
            block: 'start'
          });
        }
      }, 100);
    } else {
      // Pas d'ancre, d√©filer vers le haut
      // Utiliser un petit d√©lai pour s'assurer que le DOM est mis √† jour
      const timeoutId = setTimeout(scrollToTop, 50);
      
      // Nettoyage du timeout si le composant se d√©monte
      return () => clearTimeout(timeoutId);
    }

    // Mettre √† jour le chemin pr√©c√©dent
    previousPath.current = currentPath;

    // Log pour le d√©bogage en mode d√©veloppement
    if (process.env.NODE_ENV === 'development') {
      console.log('üîù ScrollToTop: Navigation vers', currentPath);
    }

  }, [location.pathname, location.search, location.hash]);

  // Ce composant ne rend rien, il ne fait que des effets de bord
  return null;
};

export default ScrollToTop;
