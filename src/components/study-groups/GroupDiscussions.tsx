
import React, { useState, useEffect, useRef } from 'react';
import { useAuth } from '@/context/AuthContext';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { toast } from '@/components/ui/sonner';
import { supabase } from '@/integrations/supabase/client';
import { Send, Edit, Trash2, Clock } from 'lucide-react';

type Message = {
  id: string;
  content: string;
  created_at: string;
  user_id: string;
  sender_name?: string;
  sender_avatar?: string;
};

type GroupDiscussionsProps = {
  groupId: string;
  userRole: string;
};

const GroupDiscussions: React.FC<GroupDiscussionsProps> = ({ groupId, userRole }) => {
  const { user } = useAuth();
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [newMessage, setNewMessage] = useState('');
  const [editingMessage, setEditingMessage] = useState<string | null>(null);
  const [editContent, setEditContent] = useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);
  
  const canModerate = userRole === 'admin' || userRole === 'moderator';

  useEffect(() => {
    if (!groupId) return;
    
    const fetchMessages = async () => {
      setIsLoading(true);
      try {
        // Since group_messages table doesn't exist in the database yet,
        // we'll simulate messages for now
        const mockMessages: Message[] = [
          {
            id: '1',
            content: 'Bienvenue dans le groupe de discussion!',
            created_at: new Date().toISOString(),
            user_id: 'admin',
            sender_name: 'Admin',
            sender_avatar: ''
          }
        ];
        
        setMessages(mockMessages);
      } catch (error) {
        console.error('Error fetching messages:', error);
        setMessages([]);
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchMessages();
  }, [groupId]);
  
  useEffect(() => {
    scrollToBottom();
  }, [messages]);
  
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };
  
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleTimeString('fr-FR', { 
      hour: '2-digit', 
      minute: '2-digit',
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  };
  
  const sendMessage = async () => {
    if (!newMessage.trim() || !user) return;
    
    try {
      // In a real application, this would insert into a group_messages table
      const message: Message = {
        content: newMessage,
        user_id: user.id,
        created_at: new Date().toISOString(),
        id: `temp-${Date.now()}`, // This would be generated by the database
        sender_name: user.displayName,
        sender_avatar: user.profileImage
      };
      
      // Optimistic update
      setMessages([...messages, message]);
      setNewMessage('');
      
      // In a real implementation we would insert the message to the database here
      
    } catch (error) {
      console.error('Error sending message:', error);
      toast.error('Erreur lors de l\'envoi du message');
    }
  };
  
  const updateMessage = async () => {
    if (!editingMessage || !editContent.trim()) return;
    
    try {
      // In a real application, this would update the message in the database
      const updatedMessages = messages.map(msg => 
        msg.id === editingMessage ? { ...msg, content: editContent } : msg
      );
      
      setMessages(updatedMessages);
      setEditingMessage(null);
      setEditContent('');
      
    } catch (error) {
      console.error('Error updating message:', error);
      toast.error('Erreur lors de la mise Ã  jour du message');
    }
  };
  
  const deleteMessage = async (messageId: string) => {
    try {
      // In a real application, this would delete the message from the database
      const updatedMessages = messages.filter(msg => msg.id !== messageId);
      setMessages(updatedMessages);
      
    } catch (error) {
      console.error('Error deleting message:', error);
      toast.error('Erreur lors de la suppression du message');
    }
  };
  
  return (
    <Card>
      <CardHeader>
        <CardTitle>Discussion du groupe</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="flex flex-col h-[600px]">
          <div className="flex-grow overflow-y-auto mb-4 p-2">
            {isLoading ? (
              <div className="flex justify-center py-12">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-medical-teal"></div>
              </div>
            ) : messages.length > 0 ? (
              <div className="space-y-4">
                {messages.map((message) => (
                  <div 
                    key={message.id} 
                    className={`flex ${message.user_id === user?.id ? 'justify-end' : 'justify-start'}`}
                  >
                    <div 
                      className={`flex max-w-[80%] ${
                        message.user_id === user?.id 
                          ? 'flex-row-reverse' 
                          : 'flex-row'
                      }`}
                    >
                      <Avatar className={`h-8 w-8 ${message.user_id === user?.id ? 'ml-2' : 'mr-2'}`}>
                        <AvatarImage src={message.sender_avatar} />
                        <AvatarFallback className="bg-medical-teal text-white text-xs">
                          {message.sender_name?.substring(0, 2).toUpperCase()}
                        </AvatarFallback>
                      </Avatar>
                      
                      <div>
                        <div 
                          className={`rounded-lg p-3 text-sm ${
                            message.user_id === user?.id 
                              ? 'bg-medical-teal text-white' 
                              : 'bg-gray-100 text-gray-800'
                          }`}
                        >
                          {editingMessage === message.id ? (
                            <div className="space-y-2">
                              <textarea
                                className="w-full rounded border p-2 text-gray-800"
                                value={editContent}
                                onChange={(e) => setEditContent(e.target.value)}
                                rows={2}
                                autoFocus
                              />
                              <div className="flex justify-end gap-2">
                                <Button 
                                  size="sm" 
                                  variant="ghost" 
                                  onClick={() => setEditingMessage(null)}
                                  className="h-7 text-xs"
                                >
                                  Annuler
                                </Button>
                                <Button 
                                  size="sm" 
                                  onClick={updateMessage}
                                  className="h-7 text-xs"
                                >
                                  Enregistrer
                                </Button>
                              </div>
                            </div>
                          ) : (
                            message.content
                          )}
                        </div>
                        
                        <div 
                          className={`text-xs text-gray-500 mt-1 flex items-center gap-2 ${
                            message.user_id === user?.id ? 'justify-end' : 'justify-start'
                          }`}
                        >
                          <span className="flex items-center">
                            <Clock size={12} className="mr-1" />
                            {formatDate(message.created_at)}
                          </span>
                          
                          {message.user_id === user?.id && editingMessage !== message.id && (
                            <div className="flex gap-2">
                              <button 
                                onClick={() => {
                                  setEditingMessage(message.id);
                                  setEditContent(message.content);
                                }}
                                className="text-blue-500 hover:text-blue-700"
                              >
                                <Edit size={12} />
                              </button>
                              <button 
                                onClick={() => deleteMessage(message.id)}
                                className="text-red-500 hover:text-red-700"
                              >
                                <Trash2 size={12} />
                              </button>
                            </div>
                          )}
                          
                          {message.user_id !== user?.id && canModerate && (
                            <button 
                              onClick={() => deleteMessage(message.id)}
                              className="text-red-500 hover:text-red-700"
                            >
                              <Trash2 size={12} />
                            </button>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
                <div ref={messagesEndRef} />
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center h-full">
                <p className="text-gray-500 mb-2">Aucun message dans cette discussion</p>
                <p className="text-sm text-gray-400">Soyez le premier Ã  Ã©crire !</p>
              </div>
            )}
          </div>
          
          <div className="relative">
            <textarea
              className="w-full border rounded-md py-2 px-4 pr-12 resize-none"
              placeholder="Ãcrivez votre message..."
              rows={2}
              value={newMessage}
              onChange={(e) => setNewMessage(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                  e.preventDefault();
                  sendMessage();
                }
              }}
            />
            <Button 
              className="absolute bottom-2 right-2 h-8 w-8 p-0"
              onClick={sendMessage}
              disabled={!newMessage.trim()}
            >
              <Send size={16} />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default GroupDiscussions;
