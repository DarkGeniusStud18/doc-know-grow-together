
/**
 * Helper d'authentification sp√©cifique aux environnements natifs Capacitor
 * G√®re les fonctionnalit√©s natives comme les biom√©triques, les notifications push, etc.
 */

import { supabase, isNativeEnvironment } from '@/integrations/supabase/client';
import { toast } from '@/components/ui/sonner';

/**
 * Configuration des redirections pour l'authentification native
 * Utilise des deep links pour une meilleure exp√©rience utilisateur mobile
 */
export const getNativeAuthConfig = () => {
  const baseUrl = isNativeEnvironment() 
    ? 'com.medcollabmedoc.app://auth' // Deep link pour l'app native
    : window.location.origin; // URL web pour le navigateur
    
  return {
    redirectTo: `${baseUrl}/auth-callback`,
    emailRedirectTo: `${baseUrl}/email-confirmation`
  };
};

/**
 * Gestion native des erreurs d'authentification avec feedback haptique
 */
export const handleNativeAuthError = async (error: any, context: string) => {
  console.error(`‚ùå Erreur d'authentification native [${context}]:`, error);
  
  // Feedback haptique pour les erreurs sur mobile seulement
  if (isNativeEnvironment()) {
    try {
      const { Haptics, ImpactStyle } = await import('@capacitor/haptics');
      await Haptics.impact({ style: ImpactStyle.Light });
    } catch (hapticsError) {
      console.log('üîá Haptics non disponible:', hapticsError);
    }
  }
  
  // Messages d'erreur localis√©s et user-friendly
  const errorMessages: Record<string, string> = {
    'Email not confirmed': 'Veuillez confirmer votre email avant de vous connecter',
    'Invalid login credentials': 'Identifiants de connexion invalides',
    'User not found': 'Aucun compte trouv√© avec cette adresse email',
    'Too many requests': 'Trop de tentatives de connexion. Veuillez patienter quelques minutes',
    'Network error': 'Erreur de connexion. V√©rifiez votre connexion internet'
  };
  
  const friendlyMessage = errorMessages[error.message] || 
    'Une erreur est survenue lors de l\'authentification. Veuillez r√©essayer.';
  
  toast.error('Erreur d\'authentification', {
    description: friendlyMessage,
    duration: 5000
  });
};

/**
 * Gestion native du succ√®s d'authentification avec feedback haptique
 */
export const handleNativeAuthSuccess = async (user: any) => {
  console.log('‚úÖ Authentification native r√©ussie pour:', user?.email);
  
  // Feedback haptique pour le succ√®s sur mobile seulement
  if (isNativeEnvironment()) {
    try {
      const { Haptics, ImpactStyle } = await import('@capacitor/haptics');
      await Haptics.impact({ style: ImpactStyle.Medium });
    } catch (hapticsError) {
      console.log('üîá Haptics non disponible:', hapticsError);
    }
  }
  
  toast.success('Connexion r√©ussie', {
    description: `Bienvenue ${user?.user_metadata?.display_name || user?.email} !`,
    duration: 3000
  });
};

/**
 * V√©rifie la connectivit√© r√©seau avant les op√©rations d'authentification
 */
export const checkNetworkConnectivity = async (): Promise<boolean> => {
  if (!isNativeEnvironment()) {
    return navigator.onLine;
  }
  
  try {
    const { Network } = await import('@capacitor/network');
    const status = await Network.getStatus();
    return status.connected;
  } catch (error) {
    console.log('üåê V√©rification r√©seau non disponible:', error);
    return true; // Assume connect√© si impossible de v√©rifier
  }
};

/**
 * Configuration des notifications push pour l'authentification (optionnel)
 */
export const setupAuthNotifications = async () => {
  if (!isNativeEnvironment()) {
    console.log('üì± Notifications push non disponibles en environnement web');
    return;
  }
  
  try {
    const { PushNotifications } = await import('@capacitor/push-notifications');
    
    // Demande de permission pour les notifications
    const permission = await PushNotifications.requestPermissions();
    
    if (permission.receive === 'granted') {
      console.log('‚úÖ Permissions de notifications accord√©es');
      // Ici vous pourriez configurer des notifications pour les √©v√©nements d'auth
    }
  } catch (error) {
    console.log('üîî Configuration des notifications √©chou√©e:', error);
  }
};

/**
 * Gestion s√©curis√©e de la d√©connexion native
 */
export const nativeSignOut = async (): Promise<void> => {
  try {
    // V√©rification de la connectivit√© avant la d√©connexion
    const isConnected = await checkNetworkConnectivity();
    
    if (!isConnected) {
      toast.error('Pas de connexion internet', {
        description: 'Veuillez vous connecter √† internet pour vous d√©connecter'
      });
      return;
    }
    
    const { error } = await supabase.auth.signOut();
    
    if (error) {
      throw error;
    }
    
    // Nettoyage du stockage local/natif
    if (isNativeEnvironment()) {
      try {
        const { Preferences } = await import('@capacitor/preferences');
        await Preferences.clear(); // Nettoyage complet pour la s√©curit√©
        console.log('üßπ Stockage natif nettoy√© apr√®s d√©connexion');
      } catch (storageError) {
        console.log('‚ö†Ô∏è Erreur de nettoyage du stockage:', storageError);
      }
    }
    
    // Feedback haptique de succ√®s
    if (isNativeEnvironment()) {
      try {
        const { Haptics, ImpactStyle } = await import('@capacitor/haptics');
        await Haptics.impact({ style: ImpactStyle.Light });
      } catch (hapticsError) {
        console.log('üîá Haptics non disponible:', hapticsError);
      }
    }
    
    toast.success('D√©connexion r√©ussie', {
      description: 'Vous avez √©t√© d√©connect√© en toute s√©curit√©'
    });
    
  } catch (error: any) {
    console.error('‚ùå Erreur lors de la d√©connexion native:', error);
    handleNativeAuthError(error, 'd√©connexion');
  }
};

/**
 * Utilitaire pour obtenir les capacit√©s de l'appareil
 */
export const getDeviceCapabilities = async () => {
  if (!isNativeEnvironment()) {
    return {
      platform: 'web',
      hasHaptics: false,
      hasNotifications: 'Notification' in window,
      hasNetwork: 'navigator' in window && 'onLine' in navigator
    };
  }
  
  const capabilities = {
    platform: 'native',
    hasHaptics: false,
    hasNotifications: false,
    hasNetwork: false
  };
  
  try {
    // V√©rification des capacit√©s disponibles
    await import('@capacitor/haptics');
    capabilities.hasHaptics = true;
  } catch (error) {
    console.log('üîá Haptics non disponible');
  }
  
  try {
    await import('@capacitor/push-notifications');
    capabilities.hasNotifications = true;
  } catch (error) {
    console.log('üîî Push notifications non disponibles');
  }
  
  try {
    await import('@capacitor/network');
    capabilities.hasNetwork = true;
  } catch (error) {
    console.log('üåê Network API non disponible');
  }
  
  return capabilities;
};
