
/**
 * Gestionnaire d'authentification pour les comptes de d√©monstration
 * 
 * Ce service g√®re l'authentification des comptes de d√©monstration pour permettre aux utilisateurs
 * de tester l'application sans cr√©er de compte r√©el. Il simule un processus d'authentification
 * r√©aliste avec d√©lai de r√©seau et gestion d'erreurs.
 */

import { toast } from "@/components/ui/sonner";
import { User } from "../../types";
import { getCurrentUser } from "../../user-service";

/**
 * Types de comptes de d√©monstration disponibles
 * Utilis√©s pour cr√©er des profils utilisateur sp√©cifiques selon le contexte
 */
type DemoAccountType = 'student' | 'professional';

/**
 * Configuration des comptes de d√©monstration
 * Centralise les informations des comptes de test
 */
const DEMO_ACCOUNTS_CONFIG = {
  student: {
    email: 'student@example.com',
    displayName: '√âtudiant de D√©monstration',
    role: 'student' as const
  },
  professional: {
    email: 'doctor@example.com', 
    displayName: 'Professionnel de D√©monstration',
    role: 'professional' as const
  }
} as const;

/**
 * Dur√©e de simulation du d√©lai r√©seau pour les comptes de d√©monstration (en ms)
 * Simule une exp√©rience utilisateur r√©aliste
 */
const DEMO_NETWORK_DELAY = 800;

/**
 * G√®re le processus de connexion pour un compte de d√©monstration
 * 
 * Cette fonction orchestre l'authentification compl√®te d'un compte de d√©monstration :
 * - Validation du type de compte demand√©
 * - Simulation d'un d√©lai r√©seau r√©aliste
 * - Stockage s√©curis√© des informations de d√©monstration
 * - R√©cup√©ration du profil utilisateur via le service d√©di√©
 * - Affichage de notifications utilisateur appropri√©es
 * 
 * @param email - Email du compte de d√©monstration √† authentifier
 * @returns Promise<User | null> - Objet utilisateur ou null en cas d'erreur
 * 
 * @example
 * ```typescript
 * const demoUser = await handleDemoLogin('student@example.com');
 * if (demoUser) {
 *   console.log('Connexion d√©mo r√©ussie:', demoUser.displayName);
 * }
 * ```
 */
export const handleDemoLogin = async (email: string): Promise<User | null> => {
  console.log('üé≠ AuthDemo: D√©but d\'authentification pour compte de d√©monstration:', email);
  
  try {
    // Simulation d'un d√©lai r√©seau r√©aliste pour l'exp√©rience utilisateur
    console.log('‚è≥ AuthDemo: Simulation du d√©lai r√©seau...');
    await new Promise(resolve => setTimeout(resolve, DEMO_NETWORK_DELAY));
    
    // D√©termination du type d'utilisateur de d√©monstration bas√© sur l'email
    const demoUserType: DemoAccountType = email === 'student@example.com' ? 'student' : 'professional';
    const demoConfig = DEMO_ACCOUNTS_CONFIG[demoUserType];
    
    console.log(`üë§ AuthDemo: Configuration du profil de d√©monstration pour type: ${demoUserType}`);
    
    // Stockage s√©curis√© du type d'utilisateur de d√©monstration
    // Utilisation du localStorage pour persistance entre les sessions
    localStorage.setItem('demoUser', demoUserType);
    console.log('üíæ AuthDemo: Informations de d√©monstration stock√©es localement');
    
    // R√©cup√©ration du profil utilisateur complet via le service utilisateur
    console.log('üîÑ AuthDemo: R√©cup√©ration du profil utilisateur...');
    const demoUser = await getCurrentUser();
    
    // V√©rification de la cr√©ation r√©ussie du profil utilisateur
    if (demoUser) {
      console.log('‚úÖ AuthDemo: Profil utilisateur cr√©√© avec succ√®s:', {
        id: demoUser.id,
        name: demoUser.displayName,
        role: demoUser.role
      });
      
      // Notification de succ√®s avec personnalisation selon le type d'utilisateur
      toast.success('Connexion de d√©monstration r√©ussie', { 
        id: 'demo-login-success',
        description: `Bienvenue ${demoUser.displayName} ! Explorez toutes les fonctionnalit√©s.`,
        duration: 4000
      });
      
      return demoUser;
    }
    
    // Gestion d'erreur : √©chec de cr√©ation du profil utilisateur
    console.error('‚ùå AuthDemo: Impossible de cr√©er le profil utilisateur de d√©monstration');
    toast.error('Erreur de d√©monstration', {
      description: 'Impossible de cr√©er le profil de d√©monstration. Veuillez r√©essayer.',
      duration: 5000
    });
    return null;
    
  } catch (error) {
    // Gestion des erreurs inattendues avec logging d√©taill√©
    console.error('üí• AuthDemo: Erreur critique lors de l\'authentification de d√©monstration:', {
      error: error instanceof Error ? error.message : 'Erreur inconnue',
      email,
      timestamp: new Date().toISOString()
    });
    
    toast.error('Erreur de d√©monstration', {
      description: 'Une erreur technique est survenue. Veuillez r√©essayer dans quelques instants.',
      duration: 6000
    });
    return null;
  }
};

/**
 * V√©rifie si un email correspond √† un compte de d√©monstration
 * Fonction utilitaire pour identifier les comptes de test
 * 
 * @param email - Email √† v√©rifier
 * @returns true si c'est un compte de d√©monstration, false sinon
 */
export const isDemoAccount = (email: string): boolean => {
  const normalizedEmail = email.trim().toLowerCase();
  return normalizedEmail === 'student@example.com' || normalizedEmail === 'doctor@example.com';
};

/**
 * Nettoie les donn√©es de d√©monstration du stockage local
 * Fonction utilitaire pour la d√©connexion des comptes de d√©monstration
 */
export const clearDemoData = (): void => {
  localStorage.removeItem('demoUser');
  console.log('üßπ AuthDemo: Donn√©es de d√©monstration nettoy√©es');
};
